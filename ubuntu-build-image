#!/usr/bin/env bash
# vim: set autoindent smartindent ts=4 sw=4 sts=4 noet filetype=sh:
###############################################################################
## Based on instructions from:
## https://github.com/RMerl/asuswrt-merlin/wiki/Compiling-from-source-using-a-Debian-based-Linux-Distribution
## https://github.com/RMerl/asuswrt-merlin/wiki/Compile-Firmware-from-source-using-Ubuntu
###############################################################################
[[ -n "$DEBUG" ]] && set -x
pushd $(dirname $0) > /dev/null; CURRABSPATH=$(readlink -nf "$(pwd)"); popd > /dev/null
[[ -t 1 ]] && { G="\e[1;32m"; R="\e[1;31m"; Z="\e[0m"; B="\e[1;34m"; W="\e[1;37m"; Y="\e[1;33m"; }
ROUTERMDL=${1}
BASEDIR=${2:-$CURRABSPATH}
CURRDATE=$(date +'%Y-%m-%dT%H-%M-%S')
_TMUX_LOG="$BASEDIR/tmux-${CURRDATE}.log"
help_syntax()
{
	echo -e "${W}SYNTAX:${Z} ${0##*/} <router-model> [path]\n"
	echo -e "\twhere:\n\
\t* ${W}path${Z} is a directory containing the asuswrt-merlin sources\n\
\t  (default is the directory with this script: $CURRABSPATH)\n\
\t* ${W}router-model${Z} is the model name you'd pass to make\n\
\t  (e.g. rt-n66u, rt-ac66u etc)\n"
	echo -e "Variables:\n\t${W}USE_SUDO${Z} if set will 'install' and use tools in /opt"
}
fatal()
{
	[[ "x$1" == "xhelp" ]] && { SHOWHELP=1; shift; }
	echo -e "${R}ERROR:${Z} ${1:-<unknown>}"
	((SHOWHELP)) && help_syntax
	exit 1
}
cleanup()
{
	if [[ -n "$TMUX_PANE" ]]; then
		echo -e "\n${Y}CLEANUP${Z}: turning off tmux logging ($_TMUX_LOG)"
		tmux pipe-pane -t $TMUX_PANE
	fi
}
cleanup_and_revert()
{
	echo -e "\n${Y}CLEANUP${Z}: extended cleanup of source tree changes"
	# Changed files will be reverted
	find "$BASEDIR" -type f -name '*.BAK-build-image'|while read fname; do
		( set -x && mv "$fname" "${fname%%.BAK-build-image}" )
	done
	# Simply remove proxy.h if we moved it there
	rm -f "$BASEDIR/release/src/router/neon/proxy.h"
	# Unlink the toolchain symlink, in case we were asked to put one
	[[ -n "$USE_SUDO" ]] && sudo unlink /opt/brcm
	cleanup
}
install_prerequisites()
{
	echo -e "Will now attempt to install all prerequisite packages. This requires ${W}sudo${Z}."
	echo -e "The command to be run is:\n ${W}sudo apt-get --no-install-recommends install ${Z}$PREREQ_PKGS"
	read -p "Do you want to continue? (if not, hit Ctrl+C to abort)" ans
	if [[ "${ans:0:1}" || "${ans:0:1}" ]]; then
		sudo apt-get --no-install-recommends install $PREREQ_PKGS
	fi
	exit 0
}
if [[ -n "$TMUX_PANE" ]]; then
	echo -e "${Y}NOTE:${Z} turning on tmux logging ($_TMUX_LOG)"
	tmux pipe-pane -t $TMUX_PANE "cat >> $_TMUX_LOG" && trap cleanup EXIT
fi
[[ -n "$ROUTERMDL" ]] || fatal help "you have to ${W}give the router model${Z} to build for."
# Match the router model to find the correct base directory for make
case ${ROUTERMDL^^} in
	-P|--prereq*)
		INSTALL_PREREQ=1
		;;
	RT-N16)
		MKBASE="src-rt"
		;;
	RT-N66|RT-N66[URW]|RT-AC66|RT-AC66[URW])
		MKBASE="src-rt-6.x"
		;;
	RT-AC56|RT-AC56[URW]|RT-AC68|RT-AC68[URW]) # RT-AC87[URW] ???
		MKBASE="src-rt-6.x.4708"
		;;
	*) fatal "unrecognized router model ${W}$ROUTERMDL${Z}. Either the command line or this script needs fixing."
		;;
esac
[[ -f "$BASEDIR/README-merlin.txt" ]] || fatal help "$BASEDIR is expected to contain a file ${W}README-merlin.txt${Z}."
[[ -e "/etc/debian_version" ]] || fatal "this script expects the Debian flavor called ${W}Ubuntu${Z}."
type lsb_release > /dev/null 2>&1 || fatal "${W}lsb_release{$Z} is expected to be installed. That is normally the case on Ubuntu anyway."
[[ "xUbuntu" == "x$(lsb_release -si)" ]] || fatal "this script has only been tested on ${W}Ubuntu${Z}."
let UBUREL=0x$(lsb_release -sr|tr -d '.')
((UBUREL >= 0x1204)) || fatal "expecting a ${W}Ubuntu >= 12.04{$Z} (precise)."
((UBUREL == 0x1404)) || echo -e "${Y}NOTE:${Z} this script has only been tested on Ubuntu 14.04. If you run it on a different platform, please report back if it works. But more importantly report back if it doesn't. Thanks."
# All those packages are required according to the asuswrt-merlin docs
PREREQ_PKGS="autoconf automake bash bison bzip2 diffutils file flex g++ gawk gcc-multilib gettext gperf groff-base libncurses-dev libexpat1-dev libslang2 libssl-dev libtool libxml-parser-perl make patch perl pkg-config python sed shtool tar texinfo unzip zlib1g zlib1g-dev"
PREREQ_PKGS64BIT="lib32z1-dev lib32stdc++6"
# On x86_64 we also need two additional packages
[[ "x$(uname -m)" == "x86_64" ]] && PREREQ_PKGS="$PREREQ_PKGS $PREREQ_PKGS64BIT"
# On Ubuntu 13.10 and later we check for two additional packages
((UBUREL >= 0x1310)) && PREREQ_PKGS="$PREREQ_PKGS automake1.11 libproxy-dev"
# Did the user ask to install prerequisites instead?
[[ -n "$INSTALL_PREREQ" ]] && install_prerequisites
echo -en "${R}"
dpkg-query --load-avail -l $PREREQ_PKGS > /dev/null || fatal "it appears you have packages missing (see above) that are required to build a firmware image.\nUse:\n\t${W}$0 --prereq${Z}\n\t${W}apt-get --no-install-recommends install${Z} ...\nto install the missing packages, then retry."
echo -en "${Z}"
# Special steps required on Ubuntu newer than or equal to 13.10
if ((UBUREL >= 0x1310)); then
	echo -e "${Y}NOTE:${Z} Attempting fixes for Ubuntu >= 13.10"
	# fix neon missing proxy.h
	[[ -f "/usr/include/proxy.h" ]] || fatal "expected to find proxy.h from package libproxy-dev in /usr/include. It's not there, though."
	cp /usr/include/proxy.h "$BASEDIR/release/src/router/neon/" || fatal "failed to copy proxy.h into source tree" 
	# fix broken configure script for libdaemon
	( cd "$BASEDIR/release/src/router/libdaemon" && aclocal ) || fatal "failed to fix broken configure script for libdaemon"
	# fix broken configure script for libxml2
	( cd "$BASEDIR/release/src/router/libxml2" && sed -i.BAK-build-image s/^AM_C_PROTOTYPES/#AM_C_PROTOTYPES/g configure.in && aclocal ) || fatal "failed to fix broken configure script for libxml2"
fi
# Clean up leftovers
echo -e "${Y}NOTE:${Z} removing excess files"
rm -f "$BASEDIR/release/src/router/".#preconfigure*
if [[ -n "$USE_SUDO" ]]; then
	echo -e "${Y}NOTE:${Z} making toolchain available in /opt"
	sudo ln -sf "$BASEDIR/tools/brcm" /opt/brcm
	export TOOLCHAIN="/opt/brcm/hndtools-mipsel-uclibc"
else
	# Cheapo version of "installing" the toolchain to /opt/brcm
	echo -e "${Y}NOTE:${Z} looking for files in which to fix hardcoded path to toolchain"
	grep -RP '=\s*/opt/brcm/hndtools-mipsel-uclibc/' "$BASEDIR/release/" 2>/dev/null|cut -d : -f 1|sort -u|while read fname; do
		[[ -e "${fname}.BAK-build-image" ]] && { echo -e "${Y}NOTE:${Z} skipping fixup of ${fname} (prior run detected)"; continue; }
		[[ "x${fname//.BAK-build-image/}" == "x$fname" ]] || continue # skip backup files
		echo -e "Rebasing paths in: ${G}${fname}${Z}"
		sed -i.BAK-build-image 's#/opt/brcm/hndtools-mipsel-uclibc/#'"$BASEDIR/tools/brcm/hndtools-mipsel-uclibc/"'#g' "$fname" && grep --color=auto "$BASEDIR/tools/brcm/hndtools-mipsel-uclibc/" "$fname"
	done
	# Instead of installing, we override some of the paths used in the build process
	export TOOLCHAIN="$BASEDIR/tools/brcm/hndtools-mipsel-uclibc" # used in preconfigure scripts
	# Set the trap to also revert the changes we made
	trap cleanup_and_revert EXIT
fi
# Add the toolchain into the PATH
export PATH="$PATH:$TOOLCHAIN/bin"
# Check that the relevant tools execute from there
echo -e "${Y}NOTE:${Z} invoking each of the required programs to detect possible issues"
for i in mipsel-linux-addr2line mipsel-linux-ar mipsel-linux-as mipsel-linux-c++ mipsel-linux-cc mipsel-linux-c++filt mipsel-linux-cpp mipsel-linux-g++ mipsel-linux-gcc mipsel-linux-gcc-4.2.4 mipsel-linux-gcov mipsel-linux-gprof mipsel-linux-ld mipsel-linux-nm mipsel-linux-objcopy mipsel-linux-objdump mipsel-linux-ranlib mipsel-linux-readelf mipsel-linux-size mipsel-linux-strings mipsel-linux-strip; do
	$i --version > /dev/null 2>&1 || fatal "failed to execute $i"
done
# Do the make
echo -e "${Y}NOTE:${Z} running ${W}make -C release/$MKBASE clean${Z}"
make -C "$BASEDIR/release/$MKBASE" "TOOLCHAIN=$TOOLCHAIN" clean > /dev/null 2>&1
echo -e "${Y}NOTE:${Z} running ${W}make -C release/$MKBASE ${ROUTERMDL,,}${Z}"
make -C "$BASEDIR/release/$MKBASE" "TOOLCHAIN=$TOOLCHAIN" ${ROUTERMDL,,}
